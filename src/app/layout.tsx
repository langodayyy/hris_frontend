"use client";
// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import { FormProvider } from "@/context/FormContext";
import { EditProvider } from "@/context/EditFormContext";
import React, { useEffect, useState } from "react";
// import { GoogleOAuthProvider } from "@react-oauth/google";
// import { AuthProvider } from "@/context/AuthContext";
// import AuthGate from "@/components/custom/authGate";
// import {
//   BrowserRouter,
//   Navigate,
//   Route,
//   Router,
//   Routes,
// } from "react-router-dom";
// import PublicRoute from "@/components/PublicRoute";
// import Dashboard from "./dashboard/page";
// import ProtectedRoute from "@/components/ProtectedRoute";
// import SignIn from "./sign-in/page";
// import SignInAsEmployee from "./sign-in/as-employee/page";
// import CheckEmail from "./sign-in/check-email/page";
// import ForgotPassword from "./sign-in/forgot-password/page";
// import LinkExpired from "./sign-in/link-expired/page";
// import SetNewPassword from "./sign-in/set-new-password/page";
// import SuccessSetPassword from "./sign-in/success-set-password/page";
// import SignUp from "./sign-up/page";
// import SignupCompleteForm from "@/components/custom/signupCompletion";
// import SignUpCompleteRegistration from "./sign-up/complete-registration/page";
// import Employee from "./employee/page";
// import OvertimeManagement from "./overtime/page";
// import CheckclockOverviewPage from "./checkclock/checkclock-management/page";
// import NotFound from "@/components/custom/NotFound";
import Cookies from "js-cookie";
import { string } from "zod";
import { toast } from "sonner";
import { usePathname, useRouter } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const router = useRouter();
  const pathname = usePathname();

  const fetchData = async () => {

    try {
        // setIsLoading(true);
        const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/getUser`, {
            method: "GET",
        headers: {
            "Authorization": `Bearer ${Cookies.get("token")}`,
            }
        });
        const data = await res.json();
        if (res.status === 403 || res.status === 401) {
          Cookies.remove("token"); // hapus token agar tidak disimpan
          router.replace("/sign-in");
          return;
        }
        if (!res.ok) {
            throw data; 
        }

        // Cookies.set('is_profile_complete', String(data.is_profile_complete));
        // const isProfileComplete = Cookies.get('is_profile_complete');
        // if (isProfileComplete && isProfileComplete !== 'true' && isProfileComplete !== 'null') {
        //   router.replace('/sign-up/complete-registration');
        //   Cookies.set('is_profile_complete', String(false))
        //   return;
        // }
        const isProfileComplete = data.is_profile_complete === true;
        if (!isProfileComplete) {
          // Kalau belum lengkap profil dan bukan di halaman /sign-up/complete-registration, redirect
          if (pathname !== '/sign-up/complete-registration') {
            router.replace('/sign-up/complete-registration');
            return;
          }
        } else {
          // Kalau sudah lengkap profil dan masih di halaman auth atau complete-registration, redirect ke dashboard
          if (
            pathname === '/sign-in' ||
            pathname === '/sign-up' ||
            pathname === '/sign-up/complete-registration'
          ) {
            router.replace('/dashboard');
            return;
          }
        }
        Cookies.set('full_name', data.full_name)
        Cookies.set('user_role', data.user_role)
        Cookies.set('plan_name', data.plan_name)
        Cookies.set('bill_period', data.bill_period)
        Cookies.set('bill_deadline', String(data.bill_deadline))
        // if (pathname === '/sign-in' || pathname === '/sign-up') {
        //   router.replace('/dashboard');
        //   return;
        // }
        // if (isProfileComplete || pathname === '/sign-up/complete-registration') {
        //   router.replace('/dashboard');
        //   return;
        // }
        
   

    } catch (err: any) {
        let message = "Unknown error occurred";
        let messagesToShow: string[] = [];

        if (
        err &&
        typeof err === "object" &&
        "message" in err &&
        typeof (err as any).message === "string"
        ) {
        const backendError = err as { message: string; errors?: Record<string, string[]> };

        if (backendError.message.toLowerCase().includes("failed to fetch")) {
            message = "Unknown error occurred";
        } else {
            message = backendError.message;
        }

        messagesToShow = backendError.errors
            ? Object.values(backendError.errors).flat()
            : [message];
        } else {
        messagesToShow = [message]
        }
          
        toast.error(
        <>
            <p className="text-red-700 font-bold">Error</p>
            {messagesToShow.map((msg, idx) => (
            <div key={idx} className="text-red-700">â€¢ {msg}</div>
            ))}
        </>,
        { duration: 30000 }
        );
    } finally {
    }
  };
  useEffect(() => {
    fetchData();
  }, []);



  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* <AuthProvider> */}
        {/* <AuthGate> */}
        <React.StrictMode>
        <FormProvider>
          <EditProvider>
            {children}
          </EditProvider>
        </FormProvider>
        </React.StrictMode>
        {/* </AuthGate> */}
        {/* </AuthProvider> */}

        {/* <AuthProvider>
          <FormProvider>
            <BrowserRouter>
              <Routes>
                <Route element={<PublicRoute />}>
                  <Route path="/" element={<SignIn />}></Route>
                  <Route path="/sign-in" element={<SignIn />}></Route>
                  <Route
                    path="/sign-in/as-employee"
                    element={<SignInAsEmployee />}
                  ></Route>
                  <Route
                    path="/sign-in/check-email"
                    element={<CheckEmail />}
                  ></Route>
                  <Route
                    path="/sign-in/forgot-password"
                    element={<ForgotPassword />}
                  ></Route>
                  <Route
                    path="/sign-in/link-expired"
                    element={<LinkExpired />}
                  ></Route>
                  <Route
                    path="/sign-in/set-new-password"
                    element={<SetNewPassword />}
                  ></Route>
                  <Route
                    path="/sign-in/success-set-password"
                    element={<SuccessSetPassword />}
                  ></Route>
                  <Route path="/sign-up" element={<SignUp />}></Route>
                  <Route
                    path="/sign-up/complete-registration"
                    element={<SignUpCompleteRegistration />}
                  ></Route>
                </Route>

                <Route element={<ProtectedRoute />}>
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/employee" element={<Employee />} />
                  <Route path="/overtime" element={<OvertimeManagement />} />
                  <Route
                    path="/checkclock/checkclock-management"
                    element={<CheckclockOverviewPage />}
                  />
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/dashboard" element={<Dashboard />} />
                </Route>

                <Route
                  path="/"
                  element={<Navigate to="/dashboard" replace />}
                />

                <Route path="*" element={<NotFound />} />
              </Routes>
            </BrowserRouter>
          </FormProvider>
        </AuthProvider> */}
      </body>
    </html>
  );
}
